// To get started, press Ctrl+Space to bring up the completion menu and view the available nodes.

// You can also use the buttons in the sidebar to perform actions on nodes.
// Actions currently available include:

// * Enabling / disabling the node
// * Adding the bus to a bus
// * Removing the node
// * Connecting ADC channels

// For more help, browse the DeviceTree documentation at https://docs.zephyrproject.org/latest/guides/dts/index.html
// You can also visit the nRF DeviceTree extension documentation at https://nrfconnect.github.io/vscode-nrf-connect/devicetree/nrfdevicetree.html


&i2c0 {    
    pinextender: pinextender@70{
        compatible = "i2c-device";
        reg = < 0x70 >;
        pinextenderReset: pinextenderReset{
            compatible = "nordic,gpio-pins";
            gpios = <&gpio0  17 GPIO_ACTIVE_LOW>;
        };
        pinextender_int_pin: pinextender-int-pin{
            compatible = "nordic,gpio-pins";
            gpios = <&gpio0 18 GPIO_ACTIVE_LOW>;
        };
    };
    
    busswitch: busswitch@77{
        compatible = "i2c-device";
        reg = < 0x77 >;
        busswitchreset: busswitchreset{
            compatible = "nordic,gpio-pins";
            gpios = <&gpio0  16 GPIO_ACTIVE_LOW>;
        };
    };
    
    temp1: temp1@4a{
        compatible = "i2c-device";
        reg = < 0x4a >;
    };
    
    temp2: temp2@48{
        compatible = "i2c-device";
        reg = < 0x48 >;
    };
    
    temp3: temp3@4b{
        compatible = "i2c-device";
        reg = < 0x4b >;
    };
    
    temp4: temp4@49{
        compatible = "i2c-device";
        reg = < 0x49 >;
    };
    
    temp5: temp5@48{
        compatible = "i2c-device";
        reg = < 0x48 >;
    };
    
    temp6: temp6@4b{
        compatible = "i2c-device";
        reg = < 0x4b >;
    };
    
    ext_memory: ext_memory@50{
        compatible = "i2c-device";
        reg = <0x50>;
    };

    status = "okay";
    clock-frequency = <I2C_BITRATE_FAST>;
    easydma-maxcnt-bits = <128>;
};



&gpio0 {
    compatible = "nordic,nrf-gpio";
    status = "okay";
};



&i2c0 {
    pinctrl-0 = <&i2c0_default>;
    pinctrl-names = "default";
};

&pinctrl {
    i2c0_default: i2c0_default {
        group1 {
            psels = <NRF_PSEL(TWIM_SCL, 0, 19)>, <NRF_PSEL(TWIM_SDA, 0, 20)>;
        };
    };

    uart0_default: uart0_default {
        group1 {
            psels = <NRF_PSEL(UART_RX, 0, 13)>, <NRF_PSEL(UART_TX, 0, 12)>;
        };
    };
};



&gpiote {
    status = "okay";
};

&uart0 {
    status = "disabled";
    pinctrl-0 = <&uart0_default>;
    pinctrl-names = "default";
    current-speed = <9600>;
};


/ {
    zephyr,user {
        raspi_comm_in-gpios =   <&gpio0 13 0>;
        raspi_comm_out-gpios =  <&gpio0 12 0>;
        board_led1-gpios = <&gpio0 9 GPIO_ACTIVE_HIGH>;
        board_led2-gpios = <&gpio0 10 GPIO_ACTIVE_HIGH>;
    };

};

